#!/usr/bin/env node
"use strict";var validateArgs={block:Boolean,chars:String,height:Number,htmlColor:Boolean,invert:Boolean,opacity:Boolean,raw:Boolean,width:Number,writeFileWithTag:String};const fs=require("fs");var dir=new function(){this.scan=async function(t,r){if(""===t||"/"===t)return console.error("Error: directory to scan cannot be empty."),console.error('If you want to scan your script location, please use "dir2array.Scan(__dirname);"'),null;if("/"!==t.slice(-1)&&(t+="/"),!this.dirExists(t))return;const n=async t=>fs.readdirSync(t).sort().reduce(async(i,a)=>{await i;const s=t+a;return this.dirExists(s)?n(s+"/"):r(s)},Promise.resolve());return n(t)},this.dirExists=function(t){try{return fs.lstatSync(t).isDirectory()}catch(t){return!1}}};const{createCanvas:createCanvas,loadImage:loadImage}=require("canvas");async function fromCanvas(t,r,n,i){const a=await loadImage(t),s=createCanvas(r,n);s.width=r,s.height=n;const e=s.getContext("2d");e.drawImage(a,0,0,r,n);const o=e.getImageData(0,0,r,n).data,c=[];let l;for(let t=0;t<n;t+=2)for(let n=0;n<r;n++){const a=4*(t*r+n),s=[o[a],o[a+1],o[a+2],o[a+3]];0===n&&(l=[],i?i(l):c.push(l)),i?i(s):l.push(s)}return c}const defaultCharList=" .,:;i1tfLCG08@",defaultColorCharList=" CGO08@",convertHtmlChars={" ":"&nbsp;"},rgbHtmlStr=(t,r,n)=>"rgb("+[t,r,n].join(",")+");";function toAscii({chars:t,isInvert:r,isHtmlColor:n,isBlock:i,isOpacity:a,isRaw:s}){let e=[];const o=(t||(n?defaultColorCharList:defaultCharList)).split("");function c(t){if(0===t.length){if(0===e.length)return;return void e.push(n?"<br/>":s?["",[]]:"\n")}const[c,l,u]=t,h=(.3*c+.59*l+.11*u)/255;let f=o.length-1-Math.round(h*(o.length-1));r&&(f=o.length-1-f);let g=o[f];n&&convertHtmlChars[g]&&(g=convertHtmlChars[g]);const d=function(t,[r,s,e,o]){if(!n)return;return"<span style='color:"+rgbHtmlStr(r,s,e)+(i?"background-color:"+rgbHtmlStr(r,s,e):"")+(a?"opacity:"+o/255+";":"")+"'>"+t+"</span>"}(g,t)||function(t,[r,n,i,a]){if(!s)return;return[t,[r,n,i,a]]}(g,t)||g;e.push(d)}function l(t){if(!Array.isArray(t))return s?JSON.stringify(e):e.join("");e=t}return{asciiChars:l,pixel:c,pixels:function(t){return t.forEach(t=>{t.forEach(t=>{c(t)}),c([])}),l()}}}async function asciiImgCanvasNodejs(t,r={}){if(!t||"string"!=typeof t)throw new TypeError("Invalid image source value: "+t);if("object"!=typeof r)throw new TypeError("Invalid options: "+r);const n=r.chars||null,i=!0===r.opacity,a=!0===r.block,s=!0===r.htmlColor,e=!0===r.invert,o=!0===r.raw,c=!1!==r.stream,l=r.height||200,u=r.width||200,h=toAscii({chars:n,isInvert:e,isBlock:a,isOpacity:i,isHtmlColor:s,isRaw:o});if(c)return await fromCanvas(t,u,l,h.pixel),h.asciiChars();const f=await fromCanvas(t,u,l);return h.pixels(f)}const fs$1=require("fs");function formatOutput(t,r){let n=[];return r&&n.push("FILENAME="+r+":"),n.push(t),r&&n.push("[EOF]"),n=n.join("\n")}async function main(){const t=process.argv.slice(2),[r,...n]=t;r||console.log("run: ascii-img {image-path} {options?}");const i=n.reduce((t,r)=>{const[n,i]=r.replace(/^--?/,"").split("=");return validateArgs[n]&&(t[n]=validateArgs[n](i)),t},{}),{writeFileWithTag:a}=i,s=async t=>{if(!t.match(/\.(jpe?g|png|svg)$/i))return;const r=formatOutput(await asciiImgCanvasNodejs(t,i).catch(console.log),a?void 0:t);a?fs$1.writeFileSync(`${t}.${a}`,r,"utf-8"):console.log(r)};dir.dirExists(r)?await dir.scan(r,s):s(r)}main();

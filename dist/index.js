"use strict";const{createCanvas:createCanvas,loadImage:loadImage}=require("canvas");async function fromCanvas(t,r,s,i){const n=await loadImage(t),e=createCanvas(r,s);e.width=r,e.height=s;const o=e.getContext("2d");o.drawImage(n,0,0,r,s);const a=o.getImageData(0,0,r,s).data,c=[];let u;for(let t=0;t<s;t+=2)for(let s=0;s<r;s++){const n=4*(t*r+s),e=[a[n],a[n+1],a[n+2],a[n+3]];0===s&&(u=[],i?i(u):c.push(u)),i?i(e):u.push(e)}return c}const defaultCharList=" .,:;i1tfLCG08@",defaultColorCharList=" CGO08@",convertHtmlChars={" ":"&nbsp;"},rgbHtmlStr=(t,r,s)=>"rgb("+[t,r,s].join(",")+");";function toAscii({chars:t,isInvert:r,isHtmlColor:s,isBlock:i,isOpacity:n,isRaw:e}){let o=[];const a=(t||(s?defaultColorCharList:defaultCharList)).split("");function c(t){if(0===t.length){if(0===o.length)return;return void o.push(s?"<br/>":e?["",[]]:"\n")}const[c,u,l]=t,f=(.3*c+.59*u+.11*l)/255;let h=a.length-1-Math.round(f*(a.length-1));r&&(h=a.length-1-h);let d=a[h];s&&convertHtmlChars[d]&&(d=convertHtmlChars[d]);const p=function(t,[r,e,o,a]){if(!s)return;return"<span style='color:"+rgbHtmlStr(r,e,o)+(i?"background-color:"+rgbHtmlStr(r,e,o):"")+(n?"opacity:"+a/255+";":"")+"'>"+t+"</span>"}(d,t)||function(t,[r,s,i,n]){if(!e)return;return[t,[r,s,i,n]]}(d,t)||d;o.push(p)}function u(t){if(!Array.isArray(t))return e?JSON.stringify(o):o.join("");o=t}return{asciiChars:u,pixel:c,pixels:function(t){return t.forEach(t=>{t.forEach(t=>{c(t)}),c([])}),u()}}}const fs=require("fs");var dir=new function(){this.scan=async function(t,r){if(""===t||"/"===t)return console.error("Error: directory to scan cannot be empty."),console.error('If you want to scan your script location, please use "dir2array.Scan(__dirname);"'),null;if("/"!==t.slice(-1)&&(t+="/"),!this.dirExists(t))return;const s=async t=>fs.readdirSync(t).sort().reduce(async(i,n)=>{await i;const e=t+n;return this.dirExists(e)?s(e+"/"):r(e)},Promise.resolve());return s(t)},this.dirExists=function(t){try{return fs.lstatSync(t).isDirectory()}catch(t){return!1}},this.fileExists=function(t){try{return fs.existsSync(t)}catch(t){return!1}}};const{promisify:promisify}=require("util"),{URL:URL}=require("url"),http=require("http"),https=require("https"),sizeOf=require("image-size");var dimensions=async t=>{if(dir.fileExists(t))return promisify(sizeOf)(t);const r=new URL(t);return new Promise(s=>{(t.startsWith("https:")?https:http).get(r,t=>{const r=[];t.on("data",t=>{r.push(t)}).on("end",()=>{const t=Buffer.concat(r);s(sizeOf(t))})})})};async function asciiImgCanvasNodejs(t,r={}){if(!t||"string"!=typeof t)throw new TypeError("Invalid image source value: "+t);if("object"!=typeof r)throw new TypeError("Invalid options: "+r);const s=r.chars||null,i=!0===r.opacity,n=!0===r.block,e=!0===r.htmlColor,o=!0===r.invert,a=!0===r.raw,c=!1!==r.stream,u=r.height||150;let{width:l}=r;if(void 0===l){const r=await dimensions(t),s=r.height/u;l=Math.round(r.width/s)}else l=l||u;const f=toAscii({chars:s,isInvert:o,isBlock:n,isOpacity:i,isHtmlColor:e,isRaw:a});if(c)return await fromCanvas(t,l,u,f.pixel),f.asciiChars();const h=await fromCanvas(t,l,u);return f.pixels(h)}module.exports=asciiImgCanvasNodejs;

#!/usr/bin/env node
"use strict";var validateArgs={block:Boolean,chars:String,height:Number,htmlColor:Boolean,invert:Boolean,opacity:Boolean,raw:Boolean,width:Number,writeFileWithTag:String};const{createCanvas:createCanvas,loadImage:loadImage}=require("canvas");async function fromCanvas(t,r,e,o){const s=await loadImage(t),n=createCanvas(r,e);n.width=r,n.height=e;const a=n.getContext("2d");a.drawImage(s,0,0,r,e);const i=a.getImageData(0,0,r,e).data,c=[];let l;for(let t=0;t<e;t+=2)for(let e=0;e<r;e++){const s=4*(t*r+e),n=[i[s],i[s+1],i[s+2],i[s+3]];0===e&&(l=[],o?o(l):c.push(l)),o?o(n):l.push(n)}return c}const defaultCharList=" .,:;i1tfLCG08@",defaultColorCharList=" CGO08@",convertHtmlChars={" ":"&nbsp;"},rgbHtmlStr=(t,r,e)=>"rgb("+[t,r,e].join(",")+");";function toAscii({chars:t,isInvert:r,isHtmlColor:e,isBlock:o,isOpacity:s,isRaw:n}){let a=[];const i=(t||(e?defaultColorCharList:defaultCharList)).split("");function c(t){if(0===t.length){if(0===a.length)return;return void a.push(e?"<br/>":n?"":"\n")}const[c,l,u]=t,f=(.3*c+.59*l+.11*u)/255;let p=i.length-1-Math.round(f*(i.length-1));r&&(p=i.length-1-p);let g=i[p];e&&convertHtmlChars[g]&&(g=convertHtmlChars[g]);const h=function(t,[r,n,a,i]){if(!e)return;return"<span style='color:"+rgbHtmlStr(r,n,a)+(o?"background-color:"+rgbHtmlStr(r,n,a):"")+(s?"opacity:"+i/255+";":"")+"'>"+t+"</span>"}(g,t)||function(t,[r,e,o,s]){if(!n)return;return[t,[r,e,o,s]]}(g,t)||g;a.push(h)}function l(t){if(!Array.isArray(t))return n?JSON.stringify(a):a.join("");a=t}return{asciiChars:l,pixel:c,pixels:function(t){return t.forEach(t=>{t.forEach(t=>{c(t)}),c([])}),l()}}}async function asciiImgCanvasNodejs(t,r={}){if(!t||"string"!=typeof t)throw new TypeError("Invalid image source value: "+t);if("object"!=typeof r)throw new TypeError("Invalid options: "+r);const e=r.chars||null,o=!0===r.opacity,s=!0===r.block,n=!0===r.htmlColor,a=!0===r.invert,i=!0===r.raw,c=!1!==r.stream,l=r.height||200,u=r.width||200,f=toAscii({chars:e,isInvert:a,isBlock:s,isOpacity:o,isHtmlColor:n,isRaw:i});if(c)return await fromCanvas(t,u,l,f.pixel),f.asciiChars();const p=await fromCanvas(t,u,l);return f.pixels(p)}require("dotenv").config();const cors=require("cors")(),fastify=require("fastify")({logger:process.env.SERVER_LOG||!1}),[_port,_ip]=process.argv.slice(2);function queryToOpts(t){return Object.keys(t).reduce((r,e)=>(validateArgs[e]&&(r[e]=validateArgs[e](t[e])),r),{})}const postOpts=Object.freeze({schema:{body:{type:"array"}}});function doGet(t,r){return asciiImgCanvasNodejs(t,r)}function doPost(t,r){return Promise.all(t.map(t=>asciiImgCanvasNodejs(t,r)))}fastify.use(cors),fastify.get("/",()=>{const t=Object.keys(validateArgs);return{GET:"/img?url=&"+t.join("=&")+"= >>> response of text/html ",POST:"/imgs="+t.join("=&")+'= + application/json body of ["url1", "url2", "url3", ...]'}}),fastify.get("/img",(t,r)=>{const{url:e}=t.query,o=queryToOpts(t.query);return r.type("text/html").code(200),doGet(e,o)}),fastify.post("/imgs",postOpts,(t,r)=>{const e=queryToOpts(t.query),{body:o}=t;return r.type("application/json").code(200),doPost(o,e)}),fastify.listen(Number(process.env.PORT||_port)||3e3,process.env.IP||_ip||"0.0.0.0",(t,r)=>{if(t)throw console.log(`START UP ERROR: ${t}`),t;console.log(`Server listening on ${r}`)});
